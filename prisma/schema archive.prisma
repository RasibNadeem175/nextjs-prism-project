// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id        String      @id @default(cuid())
  username  String   @unique @db.VarChar(255)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  Books UsersOnBooks[]
  VisualMedia UsersOnVisualMedia[]
  Podcasts UsersOnPodcasts[]
}

//media items

model Book {
  id      String      @id @default(cuid())
  addDate DateTime @default(now())
  Title    String   @db.VarChar(255) @unique
  Author String?
  Synopsis String?
  AverateRating Int
  Users UsersOnBooks[]
  BookTags BookTag[] //implicit bridge table
}

model VisualMedia {
  id      String      @id @default(cuid())
  addDate DateTime @default(now())
  name    String   @db.VarChar(255) @unique
  Length  Int
  Author String?
  Synopsis String?
  AverateRating Int
  Users UsersOnVisualMedia[]
  VisualMediaTags VisualMediaTag[] //implicit bridge table

}

model Podcast {
  id      String      @id @default(cuid())
  addDate DateTime @default(now())
  name    String   @db.VarChar(255) @unique
  Author String?
  Synopsis String?
  AverageRating Int
  Users UsersOnPodcasts[]
  PodcastsTags PodcastTag[] //implicit bridge table

}

// Tags
model BookTag {
  bookTagId String @id @default(cuid())
  tag_name String @unique
  description String? 
  Books Book[]
}

model VisualMediaTag {
  visualMediaTagId String @id @default(cuid())
  tag_name String @unique
  description String? 
  VisualMedias VisualMedia[]
}

model PodcastTag {
  podcastTagId String @id @default(cuid())
  tag_name String @unique
  description String? 
  Podcasts Podcast[]
}


// Bridge tables

model UsersOnBooks {
  assignedAt DateTime @default(now())
  Rating Int
  Review String?
  user User @relation(fields: [userId], references: [id])
  userId String
  book Book @relation(fields: [bookId], references: [id])
  bookId String
  @@id([userId, bookId])
}

model UsersOnVisualMedia {
  assignedAt DateTime @default(now())
  Rating Int
  Review String?
  user User @relation(fields: [userId], references: [id])
  userId String
  visualMedias VisualMedia @relation(fields: [visualMediaId], references: [id])
  visualMediaId String

  @@id([userId, visualMediaId])
}

model UsersOnPodcasts {
  assignedAt DateTime @default(now())
  Rating Int
  Review String?
  user User @relation(fields: [userId], references: [id])
  userId String
  podcasts Podcast @relation(fields: [podcastId], references: [id])
  podcastId String

  @@id([userId, podcastId])

}
// 

