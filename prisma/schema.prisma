// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma
model User {
  id        String      @id @default(cuid())
  name  String   @unique @db.VarChar(255)
  email     String?   @unique
  emailVerified DateTime?
  //
  password  String
  createdAt DateTime @default(now())
  Books UsersOnBooks[]
  VisualMedia UsersOnVisualMedia[]
  Podcasts UsersOnPodcasts[]

  accounts      Account[]
  sessions      Session[]
  posts Post[]
}


model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

//media items
model Book {
  id      String      @id @default(cuid())
  addDate DateTime @default(now())
  Title    String   @db.VarChar(255) @unique
  image         String?
  Author String?
  Synopsis String?
  AverateRating Int
  Users UsersOnBooks[]
  BookTags BookTag[] //implicit bridge table
}

model VisualMedia {
  id      String      @id @default(cuid())
  addDate DateTime @default(now())
  Title    String   @db.VarChar(255) @unique
  image         String?
  Length  Int
  Author String?
  Synopsis String?
  AverateRating Int
  Users UsersOnVisualMedia[]
  VisualMediaTags VisualMediaTag[] //implicit bridge table

}

model Podcast {
  id      String      @id @default(cuid())
  addDate DateTime @default(now())
  Title    String   @db.VarChar(255) @unique
  image         String?
  Author String?
  Synopsis String?
  AverageRating Int
  Users UsersOnPodcasts[]
  PodcastsTags PodcastTag[] //implicit bridge table

}

// Tags
model BookTag {
  bookTagId String @id @default(cuid())
  tag_name String @unique
  description String? 
  Books Book[]
}

model VisualMediaTag {
  visualMediaTagId String @id @default(cuid())
  tag_name String @unique
  description String? 
  VisualMedias VisualMedia[]
}

model PodcastTag {
  podcastTagId String @id @default(cuid())
  tag_name String @unique
  description String? 
  Podcasts Podcast[]
}


// Bridge tables

model UsersOnBooks {
  assignedAt DateTime @default(now())
  Rating Int
  Review String?

  user User @relation(fields: [userId], references: [id])
  userId String
  book Book @relation(fields: [bookId], references: [id])
  bookId String

  @@id([userId, bookId])
}

model UsersOnVisualMedia {
  assignedAt DateTime @default(now())
  Rating Int
  Review String?

  user User @relation(fields: [userId], references: [id])
  userId String
  visualMedias VisualMedia @relation(fields: [visualMediaId], references: [id])
  visualMediaId String

  @@id([userId, visualMediaId])
}

model UsersOnPodcasts {
  assignedAt DateTime @default(now())
  Rating Int
  Review String?

  user User @relation(fields: [userId], references: [id])
  userId String
  podcasts Podcast @relation(fields: [podcastId], references: [id])
  podcastId String

  @@id([userId, podcastId])

}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

